import cv2
import numpy as np

# Cargar el modelo de detecciÃ³n de objetos entrenado
model = cv2.dnn.readNetFromDarknet("yolov3.cfg", "yolov3.weights")

# Definir las capas de salida del modelo
output_layers = model.getUnconnectedOutLayersNames()

# Iniciar la captura de video
cap = cv2.VideoCapture(0)

while True:
    # Leer un frame de video
    _, frame = cap.read()

    # Obtener dimensiones de la imagen
    height, width, channels = frame.shape

    # Crear un blob a partir de la imagen
    blob = cv2.dnn.blobFromImage(frame, 0.00392, (320, 320), (0, 0, 0), True, crop=False)

    # Pasar el blob por la red neuronal
    model.setInput(blob)
    output = model.forward(output_layers)

    # Inicializar una lista para guardar las coordenadas de los objetos detectados
    objects = []

    # Recorrer las salidas de la red neuronal
    for output in outputs:
        for detection in output:
            scores = detection[5:]
            class_id = np.argmax(scores)
            confidence = scores[class_id]
            if confidence > 0.5:
                # Obtener las coordenadas del objeto
                center_x = int(detection[0] * width)
                center_y = int(detection[1] * height)
                w = int(detection[2] * width)
                h = int(detection[3] * height)

                # Guardar las coordenadas del objeto en la lista
                objects.append([center_x, center_y, w, h])

    # Utilizar las coordenadas de los objetos detectados para proporcion
